.schema
SELECT title, year FROM movies WHERE title = "%Harry Potter%"
ORDER BY year ASC;
SELECT title FROM movies WHERE title LIKE = "%Potter%"
ORDER BY year ASC;
SELECT title FROM movies WHERE title LIKE "%Potter%"
ORDER BY year ASC;
SELECT title, year FROM movies WHERE title LIKE "%Harry Potter%"
ORDER BY year ASC;
SELECT title, year FROM movies WHERE title LIKE "%Harry Potter and %"
ORDER BY year ASC;
.schema
SELECT AVG(rating) FROM ratings WHERE year = 2012
SELECT AVG(rating) FROM ratings WHERE year = 2012;
SELECT AVG(rating) FROM ratings WHERE movie_id IN (SELECT movie_id FROM movies WHERE year = 2012);
SELECT AVG(rating) FROM ratings WHERE votes > 50000;
SELECT AVG(rating) FROM ratings WHERE movie_id IN (SELECT PRIMARY KEY FROM movies WHERE year = 2012);
SELECT AVG(rating) FROM ratings WHERE movie_id IN (SELECT id FROM movies WHERE year = 2012);
.schema
SELECT title FROM 
movies JOIN ratings ON movies.id = ratings.movie_id
WHERE year = 2010;
.schema
SELECT title, rating FROM 
movies JOIN ratings ON movies.id = ratings.movie_id
WHERE year = 2010;
SELECT COUNT(title, rating) FROM
movies JOIN ratings ON movies.id = ratings.movie_id
WHERE year = 2010;
SELECT COUNT(title) FROM
movies JOIN ratings ON movies.id = ratings.movie_id
WHERE year = 2010;
.schema
SELECT name FROM people WHERE id IN (SELECT title FROM movies WHERE title = "Toy Story");
SELECT name FROM people WHERE id IN (SELECT id FROM movies WHERE title = "Toy Story");
SELECT id FROM movies WHERE title = "Toy Story";
SELECT person_id FROM starts WHERE movie_id IN
-- SELECT ID
(SELECT id FROM movies WHERE title = "Toy Story");
SELECT person_id FROM stars WHERE movie_id IN
-- SELECT ID
(SELECT id FROM movies WHERE title = "Toy Story");
SELECT name FROM people WHERE id IN 
-- SELECT person ID
(SELECT person_id FROM stars WHERE movie_id IN
-- SELECT movie ID
(SELECT id FROM movies WHERE title = "Toy Story"));
SELECT names FROM people WHERE person_id IN
-- get ids of people from movies
(SELECT person_id FROM stars WHERE movie_id IN
-- get ids of movies released in 2004 from movies
(SELECT ids FROM movies WHERE year = 2004))
ORDER BY birth ASC;
SELECT name FROM people WHERE person_id IN
-- get ids of people from movies
(SELECT person_id FROM stars WHERE movie_id IN
-- get ids of movies released in 2004 from movies
(SELECT ids FROM movies WHERE year = 2004))
ORDER BY birth ASC;
SELECT name FROM people WHERE person_id IN
-- get ids of people from movies
(SELECT person_id FROM stars WHERE movie_id IN
-- get ids of movies released in 2004 from movies
(SELECT id FROM movies WHERE year = 2004))
ORDER BY birth ASC;
.schema
SELECT name FROM people WHERE id IN
-- get ids of people from movies
(SELECT person_id FROM stars WHERE movie_id IN
-- get ids of movies released in 2004 from movies
(SELECT id FROM movies WHERE year = 2004))
ORDER BY birth ASC;
-- get names from people
SELECT COUNT(DISTINCT(name)) FROM people WHERE id IN
-- get ids of people from movies
(SELECT person_id FROM stars WHERE movie_id IN
-- get ids of movies released in 2004 from movies
(SELECT id FROM movies WHERE year = 2004))
ORDER BY birth ASC;
SELECT COUNT(name) FROM people WHERE id IN
-- get ids of people from movies
(SELECT person_id FROM stars WHERE movie_id IN
-- get ids of movies released in 2004 from movies
(SELECT id FROM movies WHERE year = 2004))
ORDER BY birth ASC;
.schema
SELECT name FROM people WHERE id IN
-- Select person ID from directors 
(SELECT person_id FROM directors WHERE movie_id IN
-- Select movie ID from ratings with 9.0 or higher
(SELECT movie_id FROM ratings WHERE rating >= 9.0))
SELECT name FROM people WHERE id IN
-- Select person ID from directors 
(SELECT person_id FROM directors WHERE movie_id IN
-- Select movie ID from ratings with 9.0 or higher
(SELECT movie_id FROM ratings WHERE rating >= 9.0));
SELECT name FROM people WHERE id IN
-- Select person ID from directors 
(SELECT person_id FROM directors WHERE movie_id IN
-- Select movie ID from ratings with 9.0 or higher
(SELECT movie_id FROM ratings WHERE rating >= 9.0));
SELECT COUNT(name) FROM people WHERE id IN
-- Select person ID from directors 
(SELECT person_id FROM directors WHERE movie_id IN
-- Select movie ID from ratings with 9.0 or higher
(SELECT movie_id FROM ratings WHERE rating >= 9.0));
.schema
SELECT titles FROM movies WHERE id IN
(SELECT movie_id FROM stars WHERE person_id IN
(SELECT id FROM people WHERE name = "Chadwick Boseman"));
SELECT title FROM movies WHERE id IN
(SELECT movie_id FROM stars WHERE person_id IN
(SELECT id FROM people WHERE name = "Chadwick Boseman"));
SELECT title, rating FROM movies 
JOIN ratings ON movies.id = ratings.movie_id
WHERE id IN
(SELECT movie_id FROM stars WHERE person_id IN
(SELECT id FROM people WHERE name = "Chadwick Boseman"))
limit 5
ORDER BY rating DESC;
-- Select movie names
SELECT title, rating FROM movies 
JOIN ratings ON movies.id = ratings.movie_id
WHERE id IN
(SELECT movie_id FROM stars WHERE person_id IN
(SELECT id FROM people WHERE name = "Chadwick Boseman"))
limit 5;
SELECT title, rating FROM movies 
JOIN ratings ON movies.id = ratings.movie_id
WHERE id IN
(SELECT movie_id FROM stars WHERE person_id IN
(SELECT id FROM people WHERE name = "Chadwick Boseman"))
ORDER BY rating ASC
limit 5;
SELECT title, rating FROM movies 
JOIN ratings ON movies.id = ratings.movie_id
WHERE id IN
(SELECT movie_id FROM stars WHERE person_id IN
(SELECT id FROM people WHERE name = "Chadwick Boseman"))
ORDER BY rating DESC
limit 5;
.schema
SELECT title FROM movies WHERE id IN
-- get movie ids with both person ids
(SELECT movie_id FROM stars WHERE person_id IN
-- Select ids for depp and carter
(SELECT id FROM people WHERE name == "Johnny Depp" OR "Helena Bonham Carter"))
SELECT title FROM movies WHERE id IN
-- get movie ids with both person ids
(SELECT movie_id FROM stars WHERE person_id IN
-- Select ids for depp and carter
(SELECT id FROM people WHERE name == "Johnny Depp" OR "Helena Bonham Carter"));
SELECT title FROM movies WHERE id IN
-- get movie ids with both person ids
(SELECT movie_id FROM stars WHERE person_id IN
-- Select ids for depp and carter
(SELECT id FROM people WHERE name == "Johnny Depp" OR "Helena Bonham Carter"));
SELECT title FROM movies WHERE id IN
-- get movie ids with both person ids
(SELECT movie_id FROM stars WHERE person_id IN
-- Select ids for depp and carter
(SELECT id FROM people WHERE name == "Johnny Depp" AND "Helena Bonham Carter"));
.schema
-- get names of movies
SELECT title FROM movies WHERE id IN
-- get movie ids with both person ids
(SELECT movie_id FROM stars WHERE person_id HAVING
-- Select ids for depp and carter
(SELECT id FROM people WHERE name == "Johnny Depp" OR "Helena Bonham Carter"));
SELECT title FROM movies WHERE id IN
-- get movie ids with both person ids
(SELECT movie_id FROM stars WHERE person_id IN
-- Select ids for depp and carter
(SELECT id FROM people WHERE name == "Helena Bonham Carter"))
INTERSECT
SELECT title FROM movies WHERE id IN
-- get movie ids with both person ids
(SELECT movie_id FROM stars WHERE person_id IN
-- Select ids for depp and carter
(SELECT id FROM people WHERE name == "Johnny Depp"));
.schema
(SELECT id, birth FROM people WHERE name == "Kevin Bacon"));
(SELECT id, birth FROM people WHERE name == "Kevin Bacon");
SELECT id, birth FROM people WHERE name == "Kevin Bacon"
SELECT id, birth FROM people WHERE name == "Kevin Bacon";
SELECT id, birth FROM people WHERE name == "Kevin Bacon";
SELECT id, name, birth FROM people WHERE name == "Kevin Bacon"
SELECT id, name, birth FROM people WHERE name == "Kevin Bacon";
SELECT id, name, birth FROM people WHERE name == "Kevin Bacon";
.schema
SELECT name FROM people WHERE id IN
-- Select all the people from his movies
(SELECT person_id FROM stars WHERE movie_id IN 
-- Select movies with kevin bacon
(SELECT movie_id FROM stars WHERE person_id ==
-- select correct Kevin Bacon
(SELECT id FROM people WHERE name == "Kevin Bacon" AND birth == 1958)));
SELECT name FROM people WHERE id IN
-- Select all the people from his movies
(SELECT person_id FROM stars WHERE movie_id IN 
-- Select movies with kevin bacon
(SELECT movie_id FROM stars WHERE person_id ==
-- select correct Kevin Bacon
(SELECT id FROM people WHERE name == "Kevin Bacon" AND birth == 1958))) AND name != "Kevin Bacon";
SELECT COUNT(name) FROM people WHERE id IN
-- Select all the people from his movies
(SELECT person_id FROM stars WHERE movie_id IN
-- Select movies with kevin bacon
(SELECT movie_id FROM stars WHERE person_id ==
-- select correct Kevin Bacon
(SELECT id FROM people WHERE name == "Kevin Bacon" AND birth == 1958))) AND name != "Kevin Bacon";
submit50 cs50/problems/2020/x/movies
exit
.exit
;
.quit
SELECT title, rating FROM
movies JOIN ratings ON movies.id = ratings.movie_id
WHERE year = 2010
ORDER BY rating DESC;
SELECT title, year FROM movies WHERE title LIKE "Harry Potter%"
ORDER BY year ASC;
.exit
SELECT firstName, middleName, lastName, house FROM students;
SELECT * FROM students;
select *
select *;
SELECT lastName FROM students;
.exit
SELE
;
SELECT * FROM students;
SELECT firstName FROM students
SELECT firstName FROM students;
SELECT firstName FROM students;
.schema
.exit
.schema
.exit
.schema
SELECT first, middle, last FROM students WHERE house = gryffindor;
SELECT first, middle, last FROM students WHERE house = gryfindor;
SELECT first, middle, last FROM students WHERE house = "Gryfindor"
SELECT first, middle, last FROM students WHERE house = "Gryfindor";
SELECT first, middle, last FROM students WHERE house = "Gryfindor";
SELECT first, middle, last FROM students WHERE house = "Gryffindor";
.exit;
.exit
SELECT first, middle, last FROM students WHERE house = "Gryffindor";
.exit
DELETE FROM students
DELETE FROM students;
DELETE FROM students;
SELECT * FROM students
.exit;
.exit
SELECT * FROM students
SELECT * FROM students;
SELECT * FROM students;;
.exit
.schema
SELECT last FROM students
SELECT last FROM students;
SELECT last FROM students;
UPDATE students SET last= RTRIM(last);
.exit
.exit
DELETE FROM students
DELETE FROM students;
DELETE FROM students;
python import.py characters.csv
.exit
.exit
;
.exit
SELECT * FROM students
;
.exit
.schema
DROP TABLE checkData;
.schema
.exit
SELECT * FROM bidalgo;
DROP TABLE bidalgo
;
DROP TABLE bidalgo;
.exit
CREATE TABLE 'rankings' ('id' integer, 'name' varchar(255), 'score' integer));
CREATE TABLE 'rankings' ('id' integer, 'name' varchar(255), 'score' integer);
SELECT * FROM rankings
;
SELECT * FROM rankings;
INSERT INTO rankings (id, name, score) VALUES (1,' Matt', 50);
SELECT * FROM rankings;
exit
exit;
exit;
quite
.exit;
.exit;
.exit
DROP DATABASE rankings;
DROP TABLE rankings;
SELECT * FROM rankings;
CREATE TABLE 'rankings' ('id' integer NOT NULL AUTO_INCREMENT, 'name' varchar(255), 'score' integer);
CREATE TABLE 'rankings' ('id' integer NOT NULL AUTO_INCREMENT, 'name' varchar(255), 'score' integer, PRIMARY KEY(id) );
CREATE TABLE 'rankings' ('id' integer, 'name' varchar(255), 'score' integer, PRIMARY KEY(id) );
.exit
schema
;
schema;
.schema
;
.schema;
.tables;
.tables
.help
.tables
.cancel
.exit
.tables
.schema
.exit
SELECT * FROM users
;
.exit
SELECT * FROM users;
.tables
.schema
PRAGMA integrity_check
;
PRAGMA integrity_check;
.tables
.exit
.tables
.schema
.help
.show
.tables
.schema users
.schema
CREATE TABLE IF NOT EXISTS 'users' ('id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'username' TEXT NOT NULL, 'hash' TEXT NOT NULL, 'cash' NUMERIC NOT NULL DEFAULT 10000.00 );
CREATE TABLE sqlite_sequence(name,seq);
CREATE UNIQUE INDEX 'username' ON "users" ("username");
CREATE TABLE IF NOT EXISTS 'users' ('id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'username' TEXT NOT NULL, 'hash' TEXT NOT NULL, 'cash' NUMERIC NOT NULL DEFAULT 10000.00 );
exit
.exit
;
.exit
CREATE TABLE IF NOT EXISTS 'users' ('id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'username' TEXT NOT NULL, 'hash' TEXT NOT NULL, 'cash' NUMERIC NOT NULL DEFAULT 10000.00 );
CREATE TABLE sqlite_sequence(name,seq);
CREATE UNIQUE INDEX 'username' ON "users" ("username");
.xit
.exit
SELECT * FROM users
;
.exit
.tables
.schema
CREATE TABLE IF NOT EXISTS 'stocks' ('id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'user id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'buy' INTEGER NOT NULL, 'sell' INTEGER NOT NULL, 'date time' INTEGER NOT NULL)
;
.schema
INSERT INTO 'stocks' (user id, ticker, price, quantity, buy, sell, date time) VALUES (0, 'NFLX', 10.00, 3, 1, 0, 102);
INSERT INTO 'stocks' (id, user id, ticker, price, quantity, buy, sell, date time) VALUES (1 ,0 , 'NFLX', 10.00, 3, 1, 0, 102);
INSERT INTO stocks (user id, ticker, price, quantity, buy, sell, date time) VALUES (0 , 'NFLX', 10.00, 3, 1, 0, 102);
DROP TABLE stocks;
CREATE TABLE IF NOT EXISTS 'stocks' ('id' INTEGER AUTOINCREMENT NOT NULL, 'user id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'buy' INTEGER NOT NULL, 'sell' INTEGER NOT NULL, 'date time' INTEGER NOT NULL);
CREATE TABLE IF NOT EXISTS 'stocks' ('action id' INTEGER NOT NULL AUTOINCREMENT, 'user id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'buy' INTEGER NOT NULL, 'sell' INTEGER NOT NULL, 'date time' INTEGER NOT NULL, 
PRIMARY KEY (id),
FOREIGN KEY (user id) REFERENCES users(id));
CREATE TABLE IF NOT EXISTS 'stocks' ('action id' INTEGER AUTOINCREMENT NOT NULL, 'user id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'buy' INTEGER NOT NULL, 'sell' INTEGER NOT NULL, 'date time' INTEGER NOT NULL, 
PRIMARY KEY (id),
FOREIGN KEY (user id) REFERENCES users(id));
CREATE TABLE IF NOT EXISTS 'stocks' ('action id' INTEGER AUTO_INCREMENT NOT NULL, 'user id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'buy' INTEGER NOT NULL, 'sell' INTEGER NOT NULL, 'date time' INTEGER NOT NULL, 
PRIMARY KEY (id),
FOREIGN KEY (user id) REFERENCES users(id));
CREATE TABLE IF NOT EXISTS 'stocks' ('action id' INTEGER AUTO_INCREMENT NOT NULL, 'user id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'buy' INTEGER NOT NULL, 'sell' INTEGER NOT NULL, 'date time' INTEGER NOT NULL, 
PRIMARY KEY (id));
CREATE TABLE IF NOT EXISTS 'stocks' ('action id' INTEGER AUTO_INCREMENT NOT NULL, 'user id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'buy' INTEGER NOT NULL, 'sell' INTEGER NOT NULL, 'date time' INTEGER NOT NULL, 
PRIMARY KEY (action id));
CREATE TABLE IF NOT EXISTS 'stocks' ('action_id' INTEGER AUTO_INCREMENT NOT NULL, 'user_id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'buy' INTEGER NOT NULL, 'sell' INTEGER NOT NULL, 'date time' INTEGER NOT NULL, 
PRIMARY KEY (action_id));
.schema
INSERT INTO stocks (user_id, ticker, price, quantity, buy, sell, date time) VALUES (0 , 'NFLX', 10.00, 3, 1, 0, 102);
INSERT INTO stocks (user_id, ticker, price, quantity, buy, sell, 'date time') VALUES (0 , 'NFLX', 10.00, 3, 1, 0, 102);
INSERT INTO stocks (action_id,user_id, ticker, price, quantity, buy, sell, 'date time') VALUES (0,0, 'NFLX', 10.00, 3, 1, 0, 102);
.exit
INSERT INTO stocks (user_id, ticker, price, quantity, buy, sell, 'date time') VALUES (1, 'NFLX', 10.00, 3, 1, 0, 102);
INSERT INTO stocks (action_id, user_id, ticker, price, quantity, buy, sell, 'date time') VALUES (1,1, 'NFLX', 10.00, 3, 1, 0, 102);
.exit
SELECT ticker, price, quantity FROM stocks WHERE user_id = 1 AND buy = 1
;
CREATE TABLE IF NOT EXISTS 'buy' ('action_id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'user_id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'date time' INTEGER NOT NULL);
INSERT INTO stocks (user_id, ticker, price, quantity, 'date time') VALUES (1,1, 'NFLX', 10.00, 3, 102);
INSERT INTO stocks (user_id, ticker, price, quantity, 'date time') VALUES (1, 'NFLX', 10.00, 3, 102);
DROP TABLE stocks, buy;
DROP TABLE stocks;
DROP TABLE buy;
CREATE TABLE IF NOT EXISTS 'buy' ('action_id' INTEGER PRIMARY KEY, 'user_id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'date time' INTEGER NOT NULL);
INSERT INTO buy (user_id, ticker, price, quantity, 'date time') VALUES (1, 'NFLX', 10.00, 3, 102);
SELECT * FROM buy;
.exit
DELETE * FROM buy;
DELETE FROM buy;
.exit
UPDATE users SET cash = 10000 WHERE id = 1;
.exit
UPDATE users SET cash = 10000 WHERE id = 1;
.exit
DELETE FROM buy;
.exit
DELETE FROM buy;
UPDATE users SET cash = 10000 WHERE id = 1;
.exit
UPDATE users SET cash = 10000 WHERE id = 1;
DELETE FROM buy;
.exit
DELETE FROM buy;
UPDATE users SET cash = 10000 WHERE id = 1;
.exit
.schema
CREATE TABLE IF NOT EXISTS 'sell' ('action_id' INTEGER PRIMARY KEY, 'user_id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'date time' INTEGER NOT NULL);
.exit
.schema
drop table *;
DROP TABLES *;
DROP TABLE buy;
DROP TABLE sell;
DROP TABLE users;
CREATE TABLE IF NOT EXISTS 'users' ('id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'username' TEXT NOT NULL, 'hash' TEXT NOT NULL, 'cash' NUMERIC NOT NULL DEFAULT 10000.00 );
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE IF NOT EXISTS 'users' ('id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 'username' TEXT NOT NULL, 'hash' TEXT NOT NULL, 'cash' NUMERIC NOT NULL DEFAULT 10000.00 );
CREATE TABLE IF NOT EXISTS 'user_stocks' ('user_id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL);
CREATE TABLE IF NOT EXISTS 'history' ('action_id' INTEGER PRIMARY KEY, 'user_id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'action' INTEGER NOT NULL, 'date time' INTEGER NOT NULL);
.schema
CREATE UNIQUE INDEX 'username' ON "users" ("username");
CREATE TABLE sqlite_sequence(name,seq);
.exit
DELETE * FROM users;
DELETE FROM users;
DELETE FROM user_stocks;
DELETE FROM history;
.exit
ALTER TABLE TableName
RENAME COLUMN OldColumnName TO NewColumnName;
ALTER TABLE history
RENAME COLUMN 'date time' TO 'date_time';
ALTER TABLE history RENAME COLUMN date time TO date_time;
.exit
DROP TABLE history;
CREATE TABLE IF NOT EXISTS 'history' ('action_id' INTEGER PRIMARY KEY, 'user_id' INTEGER NOT NULL, 'ticker' TEXT NOT NULL, 'price' REAL NOT NULL, 'quantity' INTEGER NOT NULL, 'action' INTEGER NOT NULL, 'date_time' INTEGER NOT NULL);
TRUNCATE TABLE users;
TRUNCATE TABLE users
;
DELETE FROM users;
DELETE FROM user_stocks;
.exit
