1. get the long of the credit card number and save as cardnumber
2. check for length of card number and save length
3. Check for card type: AMEX, VISA, MasterCard, Invalid
    Check by looking at first two integers
    If invalid return as invalid
    
4. If Visa, AMEX, Mastercard
    1. Multiply every other digit by 2, starting with the number’s second-to-last digit, and then add those products’ digits together.
    2. Add the sum to the sum of the digits that weren’t multiplied by 2.
    3. If the total’s last digit is 0 (or, put more formally, if the total modulo 10 is congruent to 0), the number is valid!
    
5. If the card is valid return the card type

Build abstraction to do part 4

  //digits array worked check
        int j;
        for (j = 0; j < cardLength; j++)
        {
            printf("%i\n", lastDigit[j]);
        }
        
        // get *2 of every other digit and sum
        int k;
        int productSum;
        for (k = 1; k += 2; k++)
        {
           productSum = productSum + (lastDigit[k] * 2);
        }
        
        printf("Product Summed: %i\n", productSum);
    
    // get sum of non-summed digits above
        int l;
        int nonSummedNumbers;
        for (l = 0; l += 2; l++)
        {
            nonSummedNumbers = nonSummedNumbers + lastDigit[l];
        }
        
        // non summed digits check
        printf("Non Summed Digits: %i\n", nonSummedNumbers);
        
        int Total_Sums = productSum + nonSummedNumbers;
        
        printf("Total of both loops: %i\n", Total_Sums);